import cv2
import numpy as np

# Initialize the webcam
cap = cv2.VideoCapture(0)

while True:
    # Capture a frame from the webcam
    ret, frame = cap.read()
    
    if not ret:
        break

    # Convert the frame to the HSV color space
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Define the lower and upper bounds for ripe (red) and unripe (green) apples
    lower_ripe = np.array([0, 100, 100])
    upper_ripe = np.array([10, 255, 255])
    lower_unripe = np.array([35, 100, 100])
    upper_unripe = np.array([85, 255, 255])

    # Create masks for ripe and unripe apples
    mask_ripe = cv2.inRange(hsv, lower_ripe, upper_ripe)
    mask_unripe = cv2.inRange(hsv, lower_unripe, upper_unripe)

    # Calculate the percentage of ripe and unripe pixels
    total_pixels = frame.shape[0] * frame.shape[1]
    ripe_pixels = cv2.countNonZero(mask_ripe)
    unripe_pixels = cv2.countNonZero(mask_unripe)

    # Calculate the percentage of ripeness
    ripe_percentage = (ripe_pixels / total_pixels) * 100
    unripe_percentage = (unripe_pixels / total_pixels) * 100

    # Determine the ripeness level
    if ripe_percentage > unripe_percentage:
        ripeness = "Ripe"
    else:
        ripeness = "Unripe"

    # Display the ripeness level on the frame
    cv2.putText(frame, f"Ripeness: {ripeness}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

    # Display the frame with detected ripeness
    cv2.imshow('Fruit Ripeness Detector', frame)

    # Break the loop when the 'q' key is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the webcam and close OpenCV windows
cap.release()
cv2.destroyAllWindows()
